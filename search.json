[{"title":"【SQL】如何通过sql语句查看数据库的占用大小","url":"/blog/2020/03/26/【SQL】如何通过sql语句查看数据库的占用大小/","content":"\n\n##### 1、进入information_schema 数据库（存放了其他的数据库的信息）\n\n```\nuse information_schema;\n```\n\n\n##### 2、查询所有数据的大小：\n\n```\nSELECT\n\tconcat( round( sum( data_length / 1024 / 1024 ), 2 ), 'MB' ) AS DATA \nFROM\n\tTABLES;\n```\n\n\n##### 3、查看指定数据库的大小：\n比如查看数据库david_db的大小\n\n```\nSELECT\n\tconcat( round( sum( data_length / 1024 / 1024 ), 2 ), 'MB' ) AS DATA \nFROM\nTABLES \nWHERE\n\ttable_schema = 'david_db';\n```\n\n\n##### 4、查看指定数据库的某个表的大小\n比如查看数据库david_db中 t_user 表的大小\n\n```\nSELECT\n\tconcat( round( sum( data_length / 1024 / 1024 ), 2 ), 'MB' ) AS DATA \nFROM\nTABLES \nWHERE\n\ttable_schema = 'david_db' \n\tAND table_name = 't_user';\n```\n","tags":["SQL"],"categories":["SQL"]},{"title":"【SQL】MySQL创建用户并授权某个数据库权限","url":"/blog/2020/03/25/【SQL】MySQL创建用户并授权某个数据库权限/","content":"\n##### 1.创建用户：\n`CREATE USER 'david'@'%' IDENTIFIED BY 'david';`\n##### 2.修改密码：\n`update mysql.user set password=password('qq986945193') where user='david';`\n##### 3.授权数据库权限给用户：\n`grant all privileges on 数据库名.* to 'david'@'%';`\nall 可以替换为 select,delete,update,create,drop\n##### 4.刷新权限\n在操作 mysql 库做用户的增删修改的时候，操作完毕的时候最好使用 `flush privilege` 命令刷新一下权限。\n`flush privileges;`","tags":["SQL"],"categories":["SQL"]},{"title":"【Nodejs】Nodesjs命令npm install慢，使用taobao解决方案","url":"/blog/2020/03/25/【Nodejs】Nodesjs命令npm install慢，使用taobao解决方案/","content":"##### 可用 get命令查看registry\n    \n    npm congfig get registry原版结果为\n    \n    http://registry.npmjs.org\n\n##### 原版结果为\n\n    http://registry.npmjs.org\n\n##### 用set命令换成阿里的镜像就可以了\n\n```\nnpm config set registry http://registry.npm.taobao.org\n```\n","tags":["Nodejs"],"categories":["Nodejs"]},{"title":"【Mac】Mac操作系统关闭指定端口号","url":"/blog/2020/03/25/【Mac】Mac操作系统关闭指定端口号/","content":"##### 1 查看指定端口号运行的程序：\n\n\n```\nlsof -i:端口号\n```\n\n##### 2 会有类似下面的结果： \n\n```\nCOMMAND     PID       USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME\nWebProces 42624 davidzhang    5u  IPv4 0x907152bbf7b2a875      0t0  TCP localhost:64438->localhost:radan-http (ESTABLISHED)\nWebProces 42624 davidzhang   10u  IPv4 0x907152bbf7b64a05      0t0  TCP localhost:64439->localhost:radan-http (ESTABLISHED)\n```\n\n##### 3 然后执行： \n\n\n```\nkill -9 42624\n```\n\n结束进程就搞定了。","tags":["Mac"],"categories":["Mac"]},{"title":"【SQL】【MySQL】Mysql开启远程访问","url":"/blog/2020/03/25/【MySQL】Mysql开启远程访问/","content":"###### 使用MySQL：\n\n```\nmysql> use mysql;\nDatabase changed\n\n```\n###### 查看用户只有localhost\n```\nmysql>  select user,host from user;\n+-----------+-----------+\n| user      | host      |\n+-----------+-----------+\n| mysql.sys | localhost |\n| root      | localhost |\n+-----------+-----------+\n2 rows in set (0.02 sec)\n```\n###### 设置远程访问\n\n```\nmysql> update user set host='%' where user='root';\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n```\n\n###### 刷新即可\n```\nmysql> flush privileges;\nQuery OK, 0 rows affected (0.01 sec)\n```\n","tags":["SQL"],"categories":["SQL"]},{"title":"【Nacos】Nacos环境搭建","url":"/blog/2020/03/25/【Nacos】Nacos环境搭建/","content":"##### 快速开始\n\n这个快速开始手册是帮忙您快速在您的电脑上，下载、安装并使用 Nacos。\n###### 1.预备环境准备\n\nNacos 依赖 Java 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 Maven环境，请确保是在以下版本环境中安装使用:\n\n\n```\n64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。\n64 bit JDK 1.8+；下载 & 配置。\nMaven 3.2.x+；下载 & 配置。\n```\n\n\n###### 2.下载源码或者安装包\n\n你可以通过源码和发行包两种方式来获取 Nacos。\n从 Github 上下载源码方式\n\n    \n    \n    git clone https://github.com/alibaba/nacos.git\n    cd nacos/\n    mvn -Prelease-nacos clean install -U  \n    ls -al distribution/target/\n    \n    // change the $version to your actual path\n    cd distribution/target/nacos-server-$version/nacos/bin\n    \n\n\n下载编译后压缩包方式\n\n您可以从 最新稳定版本 下载 nacos-server-$version.zip 包。\n\n\n```\nunzip nacos-server-$version.zip 或者 tar -xvf nacos-server-$version.tar.gz\n  cd nacos/bin\n```\n\n\n###### 3.启动服务器\nLinux/Unix/Mac\n\n启动命令(standalone代表着单机模式运行，非集群模式):\n\n\n```\nsh startup.sh -m standalone\n```\n\nWindows\n\n启动命令：\n\n\n```\ncmd startup.cmd\n```\n\n\n或者双击startup.cmd运行文件。\n\n```\n4.服务注册&发现和配置管理\n```\n\n服务注册\n\n\n```\ncurl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&ip=20.18.7.10&port=8080'\n```\n\n服务发现\n\n\n```\ncurl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instances?serviceName=nacos.naming.serviceName'\n```\n\n发布配置\n\n\n```\ncurl -X POST \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test&content=HelloWorld\"\n```\n\n获取配置\n\n\n```\ncurl -X GET \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test\"\n```\n\n###### 5.关闭服务器\nLinux/Unix/Mac\n\n\n```\nsh shutdown.sh\n```\n\nWindows\n\n\n```\ncmd shutdown.cmd\n```\n\n\n或者双击shutdown.cmd运行文件。\n\n官方参考地址：\nhttps://nacos.io/zh-cn/docs/quick-start.html\n","tags":["Nacos"],"categories":["Java后端"]},{"title":"【Linux】Linux报找不到bin、bash问题","url":"/blog/2020/03/25/【Linux】Linux报找不到bin、bash问题/","content":"##### 写了一个shell脚本，然后放到linux下跑的时候，我用指令：\n\n```\nchmod +x david_build.sh\n\n./david_build.sh\n```\n\n但是却没有任何反应。报错 \n\n```\n“david_build.sh  /bin/bash^M:   坏的解释器：没有那个文件或目录”。\n```\n##### 最后，怀疑是空格\\r和\\n引起的，就执行了替换命令：\n\n```\nsed -i 's/\\r$//' david_build.sh\n```\n\n#####  会把 david_build.sh 中的\\r 替换成空白！最后，问题解决，成功可以执行。\n\n","tags":["Linux"],"categories":["Linux"]},{"title":"【Linux】Linux利用远程SSH连接SecureCRT中文出现乱码解决办法","url":"/blog/2020/03/25/【Linux】Linux利用远程SSH连接SecureCRT中文出现乱码解决办法/","content":"\n    1. 修改远程linux机器的配置\n\n　　`vim /etc/sysconfig/i18n`\n\n　　把LANG改成支持UTF-8的字符集\n\n　　如：\n\n　`　LANG=\"zh_CN.UTF-8\"`\n\n　　或者是\n\n　　`LANG=\"en_US.UTF-8\"`\n\n    2. 改Secure CRT的设置\n\n　　选项-》会话选项-》外观-》字符编码-》`uft-8`\n\n    3. 退出，重新登录。\n\n　　`utf8`的文件与文件名均可以正常阅读了。\n\n    上面就是Linux下SecureCRT中文显示乱码的解决方法，\n\n    如果你使用中文语言的SecureCRT时出现乱码，可按文中介绍的方法对LANG进行修改。","tags":["Linux"],"categories":["Linux"]},{"title":"【JDK】Linux安装源码包JDK完整步骤","url":"/blog/2020/03/25/【JDK】Linux安装源码包JDK完整步骤/","content":"##### 【JDK】Linux安装源码包JDK完整步骤\n\n1、检查一下系统中的jdk版本\n\n```shell\n[root@localhost software]# java -version\n```\n显示：\n\n```shell\nopenjdk version \"1.8.0_102\"\nOpenJDK Runtime Environment (build 1.8.0_102-b14)\nOpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)\n```\n2、检测jdk安装包\n\n```shell\n[root@localhost software]# rpm -qa | grep java`\n    java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64\n    python-javapackages-3.4.1-11.el7.noarch\n    tzdata-java-2016g-2.el7.noarch\n    javapackages-tools-3.4.1-11.el7.noarch\n    java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64\n    java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64\n    java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64\n```\n\n3、卸载openjdk\n\n```shell\n[root@localhost software]# rpm -e --nodeps tzdata-java-2016g-2.el7.noarch\n[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64\n[root@localhost software]# rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64\n```\n或者使用\n\n```shell\n[root@localhost jvm]# yum remove *openjdk*\n之后再次输入rpm -qa | grep java 查看卸载情况：\n\n[root@localhost software]# rpm -qa | grep java\npython-javapackages-3.4.1-11.el7.noarch\njavapackages-tools-3.4.1-11.el7.noarch\n```\n\n4、安装新的jdk\n\n首先到jdk官网上下载你想要的jdk版本，下载完成之后将需要安装的jdk安装包放到Linux系统指定的文件夹下，并且命令进入该文件夹下：\n```shell\n[root@localhost software]# ll\ntotal 252664\n-rw-r--r--. 1 root root  11830603 Jun  9 06:43 alibaba-rocketmq-3.2.6.tar.gz\n-rw-r--r--. 1 root root  43399561 Jun  9 06:42 apache-activemq-5.11.1-bin.tar.gz\n-rwxrw-rw-. 1 root root 185540433 Apr 21 09:06 jdk-8u131-linux-x64.tar.gz\n-rw-r--r--. 1 root root   1547695 Jun  9 06:44 redis-3.2.9.tar.gz\n-rw-r--r--. 1 root root  16402010 Jun  9 06:40 zookeeper-3.4.5.tar.gz\n```\n\n解压 jdk-8u131-linux-x64.tar.gz安装包\n\n```shell\n[root@localhost software]# mkdir -p /usr/lib/jvm\n[root@localhost software]# tar -zxvf jdk-8u131-linux-x64.tar.gz -C /usr/lib/jvm\n```\n5、设置环境变量\n\n```shell\n[root@localhost software]# vim /etc/profile\n```\n\n在最前面添加：\n\n```shell\nexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_131  \nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport  PATH=${JAVA_HOME}/bin:$PATH\n```\n6、执行profile文件\n\n```shell\n[root@localhost software]# source /etc/profile\n```\n这样可以使配置不用重启即可立即生效。\n\n7、检查新安装的jdk\n```shell\n\n[root@localhost software]# java -version\n```\n显示：\n```shell\n\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\n```\n到此为止，整个安装过程结束。","tags":["JDK"],"categories":["Java后端"]},{"title":"【Javascript】Javascript 声明一个全局的url，多页面调用","url":"/blog/2020/03/25/【Javascript】Javascript 声明一个全局的url，多页面调用/","content":"##### 新建一个js文件  publicDavid.js\n`var baseUrl = \"http://weibo.com/mcxiaobing\";`\n\n`function getBaseUrl() {\n    return baseUrl;\n}`\n##### 页面引用：\n`<script src=\"./publicDavid.js\"></script>`\n\n##### 使用全局配置url\n\n```\nvar baseUrl = getBaseUrl();\n```\n","tags":["Javascript"],"categories":["Javascript"]},{"title":"【JDK】Windows安装jdk配置环境变量详解教程。","url":"/blog/2020/03/25/【JDK】Windows安装jdk配置环境变量详解教程。/","content":"1、配置环境变量，右击【我的电脑】---【属性】-----【高级】---【环境变量】，\n\n选择【新建系统变量】--弹出“新建系统变量”对话框，在“变量名”文本框输入\n\n```\nJAVA_HOME\n```\n\n在“变量值”文本框输入JDK的安装路径\n\n```\nD:\\KaiFaGongJu\\Java\\jdk1.8.0\n```\n\n2、在“系统变量”选项区域中查看PATH变量，如果不存在，则新建变量 \n\n```\nPATH\n```\n否则选中该变量，单击“编辑”按钮，在“变量值”文本框的起始位置添加\n\n\n```\n%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n```\n\n或者是直接\n\n```\n%JAVA_HOME%\\bin;\n```\n\n3、在“系统变量”选项区域中查看变量\n\n```\nCLASSPATH\n```\n如果不存在，则新建变量\n\n```\nCLASSPATH\n```\n否则选中该变量，单击“编辑”按钮，在“变量值”文本框的起始位置添加\n\n```\n.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n```\n\n4、在DOS窗口，输入javac命令，能够正常输出java信息即可。\n","tags":["JDK"],"categories":["Java后端"]},{"title":"【Linux】Centos7 关闭防火墙方法详解","url":"/blog/2020/03/25/【Linux】Centos7 关闭防火墙方法详解/","content":"## Centos7 关闭防火墙\n\nCentOS 7.0默认使用的是firewall作为防火墙，使用iptables必须重新设置一下\n\n1、直接关闭防火墙\n\n```shell\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service #禁止firewall开机启动\n```\n\n2、设置 iptables service（后面是安装iptables，若本地没有可省略)\n\n```shell\nyum -y install iptables-services\n```\n\n如果要修改防火墙配置，如增加防火墙端口3306\n\n```shell\nvi /etc/sysconfig/iptables\n```\n\n增加规则\n\n```shell\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT\n```\n\n保存退出后\n\n```shell\nsystemctl restart iptables.service #重启防火墙使配置生效\n\nsystemctl enable iptables.service #设置防火墙开机启动\n\n```\n\n\n最后重启系统使设置生效即可。\n\n其他系统关闭防火墙即可。\n```shell\nservice iptables stop\n```","tags":["Linux"],"categories":["Linux"]},{"title":"【Hexo】hexo-theme-aircloud主题使用教程","url":"/blog/2020/03/25/【Hexo】hexo-theme-aircloud主题使用教程/","content":"\n## Hexo-Theme-AirCloud: 一个简洁轻量的 hexo 博客主题\n\n> [English Document](./readme-en.md) | [预览地址](http://niexiaotao.cn/)\n\n## 功能简介\n\nHexo-Theme-AirCloud 是一个简洁轻量的 hexo 博客主题，旨在将中心放在博文本身，因此：\n\n* 默认没有大范围的主题色块、图片铺排等，也不要求每片博文配图，一方面这并不是我们记录知识的重点，另外一方面可能程序员群体并没有足够的素材，容易造成主题纠纷。\n* 建议通过不冗余的内容进行传达，比如默认没有博文摘要，因为不少开发者写博客的时候没有写博文摘要，如果从博客前一部分截取往往不能表达完整思想。\n\n另外，该主题主要实现的功能有:\n\n* 全局搜索功能，并对搜索内容进行高亮。\n* 博客评论功能，目前接入 [gitment](https://imsun.net/posts/gitment-introduction/)，之后考虑接入多种可选。\n* 文章详情页文章目录功能\n* 访问量统计（总体UV、PV，单页PV）\n* 语言切换能力，目前支持中文和英文\n\n## 起步\n\n> 我在\"常见问题\"中总结了该项目之前被提及的一些问题，如果你在使用过程中遇到了问题，可以在\"常见问题\"中寻找答案，如果没能解决，欢迎提[issue](https://github.com/aircloud/hexo-theme-aircloud/issues)，我会保证回复。\n\n注意，如果你不按照\"功能适配\"部分的内容进行操作，可能会导致相关提及的功能无法正常使用。\n\n* [基本使用](https://github.com/aircloud/hexo-theme-aircloud#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8)\n* [功能适配](https://github.com/aircloud/hexo-theme-aircloud#%E5%8A%9F%E8%83%BD%E9%80%82%E9%85%8D)\n    * [搜索功能](https://github.com/aircloud/hexo-theme-aircloud#%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD)\n    * [`标签`页面 & `关于`页面](https://github.com/aircloud/hexo-theme-aircloud#%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2--%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2)\n    * [评论功能](https://github.com/aircloud/hexo-theme-aircloud#%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD)\n    * [favicon 的配置](https://github.com/aircloud/hexo-theme-aircloud#%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2--%E5%85%B3%E4%BA%8E%E9%A1%B5%E9%9D%A2)\n    * [底部自定义](https://github.com/aircloud/hexo-theme-aircloud#%E5%BA%95%E9%83%A8%E8%87%AA%E5%AE%9A%E4%B9%89)\n* [高级自定义](https://github.com/aircloud/hexo-theme-aircloud#%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B)\n    * [首行缩进](https://github.com/aircloud/hexo-theme-aircloud#%E9%A6%96%E8%A1%8C%E7%BC%A9%E8%BF%9B)\n* [常见问题](https://github.com/aircloud/hexo-theme-aircloud#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)\n    * [如何取消赞赏功能？](https://github.com/aircloud/hexo-theme-aircloud#%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88%E8%B5%9E%E8%B5%8F%E5%8A%9F%E8%83%BD)\n* [一些注意事项](https://github.com/aircloud/hexo-theme-aircloud#%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9)    \n\n## 基本使用    \n\n**建议：参考 [DEMO](https://github.com/aircloud/hexo-aircloud-blog) 进行配置，尤其是 _config.yml 部分，否则可能会造成功能缺失**\n\n同其他博客主题使用方式相同，直接 clone 或者下载本项目，复制粘贴到 themes 文件夹下即可。\n\n具体的 _config.yml 自定义配置，请参考[DEMO](https://github.com/aircloud/hexo-aircloud-blog)。\n\n## 功能适配\n\n### 搜索功能\n\n为了使用搜索功能，首先需要安装下列插件：\n\n```shell\nnpm i hexo-generator-search --save\n```\n\n然后在 _config.yml 中进行配置，可以参考如下配置：\n\n```\nsearch:\n  path: search.json\n  field: post\n```\n\n### `标签`页面 & `关于`页面\n\n如果是新项目，默认是没有`标签`页面和`关于`页面的，需要在`source`文件夹下建立`tags`文件夹和`about`文件夹。\n\n>注：建议不要直接新建文件，而是采用 hexo 的 `hexo new page tags` 和 `hexo new page about` 的方式新建文件，这样可以被 hexo 索引到。\n\n其中`tags`文件夹中新建`index.md`并写入：\n\n```\n    ---\n    layout: \"tags\"\n    title: \"Tags\"\n    ---\n```\n\n`about`文件夹下`index.md`为一篇支持 markdown 格式的文件，需要在开头添加：\n\n\n```\n    ---\n    layout: \"about\"\n    title: \"About\"\n    date: 2016-04-21 04:48:33\n    comments: true\n    ---\n```\n\n### 评论功能\n\n目前，本博客支持以下评论功能：\n- [gitment](https://imsun.net/posts/gitment-introduction/)（gitment 经常会出现限频或者 404 等错误，其作者已关闭github认证转发服务）\n- [disqus](https://disqus.com) \n- [LiveRe](https://www.livere.com)\n\n#### gitment\n\n建议先在[gitment](https://imsun.net/posts/gitment-introduction/)进行了解，然后参考[DEMO](https://github.com/aircloud/hexo-aircloud-blog)进行配置，其中一些相关项目如下：\n\n```\ncomment:\n  type: gitment\n  id: your-id-created-by-https://github.com/settings/applications/new\n  secret: your-secret-created-by-https://github.com/settings/applications/new\n  owner: aircloud\n  repo: hexo-aircloud-blog\n```\n\n#### disqus\n\ndisqus 是一个使用比较广泛的评论系统，我们需要先在[官方网站](https://disqus.com)注册一个账号。\n\n登录后，点击首页的 GET STARTED 按钮，之后选择 I want to install Disqus on my site 选项，填写相关内容，值得注意的是，`Website Name` 需要全网唯一，而且，一般情况，假设你的 `Website Name` 填写的是 example，那么下文 `script` 字段就可以写 `'https://example.disqus.com/embed.js'`。\n\n当然，你也可以在下一步 -> 选择 basic 免费套餐 -> 选择最后的 \"I don't see my platform listed, installed manually with universal code\" -> 找到代码中的 `s.src = 'https://xxxx.disqus.com/embed.js';\n` , 从而找到 script 地址。(无需插入 disqus 给出的脚本，只需按照这里的说明配置即可)\n\n之后，你需要在 `_config.yml` 中配置如下内容：\n\n```\ncomment:\n   type: disqus\n   script: 'https://example.disqus.com/embed.js'\n```\n\n当然，你也可以配置`url` 和 `identifier`， 但是这个就属于高级内容了，对于我们一般的 hexo 博客网站来说必要性不大，如果你需要配置这些内容，可能你已经是一个高级玩家了，可以在 `themes/aircloud/layout/layout.ejs` 的相关代码的基础上进行改动。\n\n>注意: 目前，直接嵌入 disqus 的代码可能会加载失败，你也可以考虑将相关代码放在自己的博客下引入：在 public 文件夹下新建文件放入代码，跟随发布即可（放入 source 文件夹下可能会由于 hexo 的处理变得有错误），并同时更改 `_config.yml` 中的配置。\n\n#### LiveRe\n\nLiveRe 是一款来自韩国的支持中文且没有被墙LiveRe评论插件，重点是使用无需翻墙。\n\n该插件分为city和premium两个版本，其中city版是适合所有人使用的免费版本,有更高需求的可以考虑premium版本。\n\n注册之后，选择 安装 -> 选 city版本，按提示操作进入到管理页面，系统会给出一段嵌入代码，找到其中的data-id和data-uid。\n\n之后，你需要在`_config.yml`中配置如下内容\n\n```\ncomment:\n   type: livere\n   livere_id: 'city'\n   livere_uid: \n```\n\n`livere_id` 和 `livere_uid`就是注册后获得的 data-id和data-uid。\n\n### favicon 的配置\n\n项目的 favicon 默认在你的博客根目录的 `/source/img` 下面，在 `/source/img` 下面添加 favicon.ico 即可，不要添加在主题文件夹内。\n\n### 底部自定义\n\n大家如果访问提供的预览链接，会发现我们的博客底部是提供一些内容的：一些社交平台的个人主页链接、友情链接、PV、UV 与 本模版链接。\n\n一般情况下，大家无需改动底部的代码，直接在 `_config.yml` 中配置即可。\n\n配置社交平台主页的样例代码：\n\n```\n# SNS settings\n# 一些社交平台地址，支持以下几种：\nweibo_username:     3286578617\nzhihu_username:     ai-er-lan-xue-da\ngithub_username:    AirCloud\ntwitter_username:   iconie_alloy\nfacebook_username:  xiaotao.nie.5\nlinkedin_username:  小涛-聂-80964aba\n```\n\n如果不想包括某些社交平台，直接注释或删除相关代码即可（目前暂不支持在不改动模版代码的前提下新增社交平台）。\n\n配置友情链接的样例代码：\n\n```\n# Friends\n# 友情链接\nfriends: [\n    {\n        title: \"10000H\",\n        href: \"https://www.10000h.top\"\n    },{\n        title: \"Xiaotao's Page\",\n        href: \"https://niexiaotao.com\"\n    },{\n        title: \"It helps SEO\",\n        href: \"#\"\n    }\n]\n```\n\n最底部的 PV、UV 和模版地址，无需配置。\n\n## 高级自定义\n\n### 首行缩进\n\n目前可以配置是否在博客页面带有首行缩进两个汉字的效果，默认是有首行缩进的效果的，但是也可以通过下面的配置代码进行关闭：\n\n```\npost_style:\n    indent: 0\n```\n\n### 头像圆角\n\n```\navatar_style:\n  radius: true\n```\n\n## 常见问题\n\n###  如何取消赞赏功能？\n\n目前网站的赞赏功能做的比较鸡肋，缺乏一定的丰富度，如果你想取消这个功能，只需取消注释或者删除掉赞赏部分的相关配置即可：\n\n```\ndonate:\n  img: img/donate.jpg\n  content: 感谢鼓励\n```\n\n另外，如果你对赞赏部分有用户体验较好并且通用型比较好的设计，也可以提 issue，我会考虑实现。\n\n\n## 一些注意事项\n\n由于一些hexo的历史遗留问题等，为了避免给用户在使用过程中带来太多麻烦(比如需要改动主题代码甚至hexo源码)，建议用户使用过程中遵循一些规范：\n\n* 文章不要有跳级目录，比如一个`###`三级目录下是一个`#####`五级目录，然后又有一个`###`三级目录，这样有可能导致 hexo 解析出错，从而影响文章目录部分的展示。\n* 文章的段落(p)都有默认的两个字符的首行缩进，虽然能识别 markdown 段落中的换行，但是无法对换行后的内容进行缩进，所以这里需要注意样式问题(如果需要多行缩进，建议使用多个段落或者做成列表)。\n","tags":["Hexo"],"categories":["Nodejs"]},{"title":"【Hexo】利用node、hexo实现博客后台运行。","url":"/blog/2020/03/25/【Hexo】利用node、hexo实现博客后台运行。/","content":"##### 用pm2 来接管hexo的进程\n\n###### 开始操作.安装pm2\n\n\n```\n$ npm  install -g pm2\n```\n\n###### 写一个执行脚本.在博客根目录下面创建一个hexo_run.js\n\n\n```\n//run\nconst { exec } = require('child_process')\nexec('hexo server',(error, stdout, stderr) => {\n        if(error){\n                console.log('exec error: ${error}')\n                return\n        }\n        console.log('stdout: ${stdout}');\n        console.log('stderr: ${stderr}');\n})\n```\n\n###### 运行脚本.在根目录下执行。\n\n\n```\n# pm2 start hexo_run.js\n```\n\n如果关闭，可以使用关闭命令。\n```\npm2 stop hexo_run\n```","tags":["Hexo"],"categories":["Nodejs"]},{"title":"【Hibernate】在Hibernate框架中配置显示sql语句","url":"/blog/2020/03/25/【Hibernate】在Hibernate框架中配置显示sql语句/","content":"###### 使用Hibernate的框架开发时，可在Hibernate.cfg.xml中加上\n\n\n    <property name=\"hibernate.show_sql\">true</property><!-- 配置显示sql语句 -->\n    <property name=\"format_sql\">true</property><!-- 让输出的sql语句格式化 -->\n\n\n就可以在控制台显示对应的sql语句了，对于开发很有帮助。\n在项目部署时最好将其删掉，因为会消耗一定的资源。\n","tags":["Hibernate"],"categories":["Java后端"]},{"title":"【Docker】docker镜像、容器的备份与还原","url":"/blog/2020/03/25/【Docker】docker镜像、容器的备份与还原/","content":"\n##### 1. 备份容器\n首先，为了备份Docker中的容器，我们会想看看我们想要备份的容器列表。要达成该目的，我们需要在我们运行着Docker引擎，并已创建了容器的Linux机器中运行 docker ps 命令。\n\n\n```\ndocker ps\n```\n\n在此之后，我们要选择我们想要备份的容器，然后去创建该容器的快照。我们可以使用 docker commit 命令来创建快照。\n\n```\ndocker commit -p 4fb8f18f20b4 container-backup\n```\n\n该命令会生成一个作为Docker镜像的容器快照，我们可以通过运行 \n\n```\ndocker images\n```\n\n\n命令来查看Docker镜像，如下。\n\n\n正如我们所看见的，上面做的快照已经作为Docker镜像保存了。现在，为了备份该快照，我们有两个选择，一个是我们可以登录进Docker注册中心，并推送该镜像；另一个是我们可以将Docker镜像打包成tar包备份，以供今后使用。\n\n如果我们想要在DockerHub注册中心上传或备份镜像，我们只需要运行 docker login 命令来登录进Docker注册中心，然后推送所需的镜像即可。\n\n\n```\ndocker login\n```\n将镜像添加添加tag。和自己的dockerhub账号一致。\n\n```\ndocker tag david_oracle_11g qq986945193/david_oracle_11g\n```\n最后直接执行push命令，即可。\n\n```\ndocker push qq986945193/david_oracle_11g\n```\n\n如果我们不想备份到docker注册中心，而是想要将此镜像保存在本地机器中，以供日后使用，那么我们可以将其作为tar包备份。要完成该操作，我们需要运行以下 docker save 命令。\n\n\n```\ndocker save -o ~/david_mysql.tar david_mysql\n```\n\n要验证tar包是否已经生成，我们只需要在保存tar包的目录中运行 ls 命令即可。\n\n##### 2. 恢复容器\n接下来，在我们成功备份了我们的Docker容器后，我们现在来恢复这些制作了Docker镜像快照的容器。如果我们已经在注册中心推送了这些Docker镜像，那么我们仅仅需要把那个Docker镜像拖回并直接运行即可。\n\n\n```\ndocker pull david/mysql:5.5\n```\n\n\n但是，如果我们将这些Docker镜像作为tar包文件备份到了本地，那么我们只要使用 docker load 命令，后面加上tar包的备份路径，就可以加载该Docker镜像了。\n\n\n```\ndocker load -i ~/david_mysql.tar\n```\n\n现在，为了确保这些Docker镜像已经加载成功，我们来运行 docker images 命令。\n\n\n```\ndocker images\n```\n\n在镜像被加载后，我们将用加载的镜像去运行Docker容器。\n\n```\ndocker run -d -p 80:80 david_mysql\n```\n\n\n##### 3. 迁移Docker容器\n迁移容器同时涉及到了上面两个操作，备份和恢复。我们可以将任何一个Docker容器从一台机器迁移到另一台机器。在迁移过程中，首先我们将把容器备份为Docker镜像快照。然后，该Docker镜像或者是被推送到了Docker注册中心，或者被作为tar包文件保存到了本地。如果我们将镜像推送到了Docker注册中心，我们简单地从任何我们想要的机器上使用 docker run 命令来恢复并运行该容器。但是，如果我们将镜像打包成tar包备份到了本地，我们只需要拷贝或移动该镜像到我们想要的机器上，加载该镜像并运行需要的容器即可。","tags":["Docker"],"categories":["Java后端"]},{"title":"【Gradle】Windows安装并配置gradle","url":"/blog/2020/03/25/【Gradle】Windows安装并配置gradle/","content":"\n##### 1.下载最新的Gradle压缩包：\n`Gradle官网:https://gradle.org`\n\n当前最新版本下载地址:`https://gradle.org/releases/`,下载binary-only即可\n##### 2.解压下载的压缩包到指定位置,比如:\n`D:\\Gradle\\gradle-4.3.1`\n##### 3.配置环境变量：\n`右键计算机->属性->高级系统设置->环境变量,在系统变量区域，点击新建，输入变量名为：GRADLE_HOME，变量值为：D:\\DavidSoft\\Gradle\\gradle-4.3.1（根据实际情况）。找到Path，在原始内容基础上加入%GRADLE_HOME%\\bin;，必须以分号结束`\n##### 4.测试配置是否成功\n`打开一个新的cmd命令窗口或者powershell或者其他命令行工具（比如cmder），输入命令gradle -v，如果出现类似下面的消息,则说明配置成功`","tags":["Gradle"],"categories":["Gradle"]},{"title":"【Hexo】Hexo搭建静态博客教程","url":"/blog/2020/03/25/【Hexo】Hexo搭建静态博客教程/","content":"##### 首先安装好git和nodejs\n##### 安装hexo\n\n```\nnpm install -g hexo\nnpm install -g hexo-cli\n```\n##### 新建一个blog的目录，然后在该目录依次执行以下命令\n\n```\nhexo init\nnpm install\n```\n##### 执行完成后，输入以下命令，然后通过访问:http://localhost:4000，来访问，一个本地博客就可以看到了，值得注意的是，默认主题是landscape，如需要变主题，得自己手动修改。\n\n```\nhexo g\nhexo s\n```\n##### 修改主题，比如已经下载过yilia.只需修改_config.yml中theme:为\n\n```\ntheme: yilia\n```\n\n##### hexo命令解析\n\n```\nhexo g #完整命令为hexo generate,生成静态文件 \nhexo s #完整命令为hexo server,启动服务器,本地可以测试 \nhexo d #完整命令为hexo deploy,将本地编译好的静态文件发布到github上 \nhexo n #完整命令为hexo new,新建一篇文章 \nhexo clean #清除当前项目的静态文件\nhexo clean && hexo g && hexo s #命令一起执行\n```\n","tags":["Hexo"],"categories":["Nodejs"]},{"title":"【Docker】docker搭建本地gitlab，使用Git服务托管代码","url":"/blog/2020/03/25/【Docker】docker搭建本地gitlab，使用Git服务托管代码/","content":"\n##### 1 首先下载gitlab的镜像 \n```\ndocker pull gitlab/gitlab-ce:latest\n```\n##### 2 在服务器上创建目录，存放gitlab数据\n\n```\nmkdir -p /home/work/ins/conf\nmkdir -p /home/work/ins/logs\nmkdir -p home/work/ins/data/gitlab\n\n```\n#####  3 创建容器启动脚本。如果有以前执行过的，则停止并删除容器。\n\n\n```\nsudo docker stop gitlab && sudo docker rm gitlab\n\n```\n\n##### 4 启动，并设置端口号\n\n```\nsudo docker run  -d \\\n                 -p 2222:22 \\\n                 -p 8888:80 \\\n                 -p 8443:443 \\\n         -v /etc/localtime:/etc/localtime:ro \\\n                 -v  /home/work/ins/conf/gitlab:/etc/gitlab \\\n                 -v /home/work/ins/logs/gitlab:/var/log/gitlab \\\n                 -v /home/work/ins/data/gitlab/data:/var/opt/gitlab \\\n                 -h gitlab \\\n                 --name gitlab \\\n                 --privileged=true \\\n                 gitlab/gitlab-ce:latest\n```\n\n##### 5 登录验证。ip地址加端口号访问即可。\n\n\n```\n192.168.1.111:8888\n```\n\n\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】docker常用命令总结大全","url":"/blog/2020/03/25/【Docker】docker常用命令总结大全/","content":"\n##### docker命令的具体使用参数帮助\n```shell\ndocker 命令 --help\n```\n##### 查看当前正在运行的容器\n```shell\n docker ps\n```\n##### 查看所有容器的状态。最近运行过的所有容器\n```shell\ndocker ps -a\n```\n##### 启动/停止某个容器\n```shell\n docker start/stop id/name\n```\n##### 进入某个容器(使用exit退出后容器也跟着停止运行)\n```shell\n docker attach id\n```\n##### 启动一个伪终端以交互式的方式进入某个容器\n ```shell\ndocker  exec -it   9af8c6c13cb4（容器ID）   /bin/bash\n```\n##### 查看本地镜像\n```shell\n docker images\n```\n##### 删除某个容器\n```shell\n docker rm id/name\n```\n##### 删除某个镜像\n###### 有时候删除会失败，比如：有一个容器正在使用该镜像文件。这时可以加参数-f 强制删除\n```shell\ndocker rmi id/name\n```\n##### 复制ubuntu容器并且重命名为test且运行，然后以伪终端交互式方式进入容器，运行bash\n```shell\ndocker run --name test -ti ubuntu /bin/bash\n```\n##### Docker容器中使用vi编辑器\n\n```\napt-get update\napt-get install vi\n\n这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。安装V编辑器。\n```\n\n\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker配置阿里云等镜像加速方法，适用Centos和Ubuntu","url":"/blog/2020/03/25/【Docker】Docker配置阿里云等镜像加速方法，适用Centos和Ubuntu/","content":"\n##### 1. 安装／升级Docker客户端\n###### 推荐安装1.10.0以上版本的Docker客户端，参考文档 docker-ce\n\n##### 2. 配置镜像加速器\n###### 针对Docker客户端版本大于 1.10.0 的用户\n\n##### 您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\n\n```\nsudo mkdir -p /etc/docker\n\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://1o70e58r.mirror.aliyuncs.com\"]\n}\nEOF\n\nsudo systemctl daemon-reload\n\nsudo systemctl restart docker\n\n```\n#####  备注：\n```\nhttps://1o70e58r.mirror.aliyuncs.com这个是配置自己的阿里云加速地址，也可以国内其他平台的docker加速。\n```\n\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker部署安装yapi框架","url":"/blog/2020/03/25/【Docker】Docker部署安装yapi框架/","content":"###### 1、启动 MongoDB\n\n```\ndocker run -d --name mongo-yapi mongo\n```\n\n\n###### 2、获取 Yapi 镜像，版本信息可在 阿里云镜像仓库 查看\n\n```\ndocker pull registry.cn-hangzhou.aliyuncs.com/anoy/yapi\n```\n\n\n###### 3、初始化 Yapi 数据库索引及管理员账号\n\n```\ndocker run -it --rm \\\n  --link mongo-yapi:mongo \\\n  --entrypoint npm \\\n  --workdir /api/vendors \\\n  registry.cn-hangzhou.aliyuncs.com/anoy/yapi \\\n  run install-server\n```\n\n\n###### 4、启动 Yapi 服务\n\n```\ndocker run -d \\\n  --name yapi \\\n  --link mongo-yapi:mongo \\\n  --workdir /api/vendors \\\n  -p 3000:3000 \\\n  registry.cn-hangzhou.aliyuncs.com/anoy/yapi \\\n  server/app.js\n```\n\n\n###### 使用 Yapi\n\n```\n访问 http://localhost:3000   登录账号 admin@admin.com，密码 ymfe.org\n```\n\n\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker安装运行dubbo-admin","url":"/blog/2020/03/25/【Docker】Docker安装运行dubbo-admin/","content":"###### 运行dubbo-admin服务, 此服务需要单独启动一个zookeeper容器\n###### dubbo-admin将监听所有注册到zookeeper的服务, dubbo-admin默认端口8080\n\n\n##### 1 运行一个zookeeper服务。\n\n```\ndocker pull qq986945193/david_zookeeper3.4.13:v1.0\n\ndocker run --privileged=true -d --name zookeeper --publish 2181:2181  -d qq986945193/david_zookeeper3.4.13:v1.0\n\ndocker logs -f 54f6b80ffa64ea604aa691adbd5b6c296b087a3f97bc6355a629f841bbf77c20\n```\n\n\n##### 2 拉取镜像，运行dubbo-admin服务。\n\n```\ndocker run --name dubbo-admin -p 8888:8080 --link zookeeper -d qq986945193/david_dubbo_admin\n```\n\n\n##### 3 直接访问，用户名密码：root   root\n\n```\nhttp://localhost:8888\n```\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker安装并运行RabbitMQ","url":"/blog/2020/03/25/【Docker】Docker安装并运行RabbitMQ/","content":"##### 1 进入docker hub镜像仓库地址：https://hub.docker.com/\n\n```\n搜索rabbitMq，进入官方的镜像，可以看到以下几种类型的镜像；我们选择带有“mangement”的版本（包含web管理页面）\n```\n##### 2 我们拉取这个rabbitmq镜像\n\n```\ndocker pull docker.io/rabbitmq:3.7.7-management\n```\n##### 3 拉取到镜像之后，我们直接启动\n\n```\ndocker run -d --name rabbitmq3.7.7 -p 5672:5672 -p 15672:15672   -e RABBITMQ_DEFAULT_VHOST=my_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.7.7-management\n\n\n\n说明：\n\n-d 后台运行容器；\n\n--name 指定容器名；\n\n-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；\n\n-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）\n```\n\n##### 4 最后我们可以使用 ip:15672访问我们的web后台。账号密码都是我们设置的admin\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】通过Dockerfile将jar包构建成镜像并执行","url":"/blog/2020/03/25/【Docker】Docker通过Dockerfile将jar包构建成镜像并执行/","content":"\n##### 1.编写Dockerfile文件.\n\n```\n# 环境\nFROM  centos\n# 作者信息\nMAINTAINER david \"986945193@qq.com\"\n# 复制JDK环境\nCOPY jdk1.8.0_191 jdk1.8.0_191\n# 配置环境变量\nENV JAVA_HOME=./jdk1.8.0_191\nENV PATH=$JAVA_HOME/bin:$PATH\nENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n# 拷贝jar\nCOPY imd_blog_eureka-1.0-SNAPSHOT.jar .\nADD imd_blog_eureka-1.0-SNAPSHOT.jar app.jar\n# 爆漏的端口号\n#EXPOSE 8080\n# 执行命令\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n```\n\n##### 2.将jar包放在Dockerfile文件同一个目录下。执行构建命令\n\n```\ndocker build -t david/imd_blog .\n\n```\n##### 3.然后就可以当做正常的镜像使用。\n\n```\ndocker start david/imd_blog\n```\n\n\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker安装Redis详解","url":"/blog/2020/03/25/【Docker】Docker安装Redis详解/","content":"##### 1 拉取Redis镜像\n```\nsudo docker pull redis:3.2\n```\n##### 2 直接启动Redis\n\n```\nsudo docker run -p16379:6379 -d docker.io/redis:3.2 \n```\n\n```\n-p 6379:6379 : 将容器的6379端口映射到主机的16379端口\n-d 后台运行\n```\n##### 3 其他可选参数\n\n```\n-v $PWD/data:/data  -d redis:3.2 redis-server --appendonly yes\n-v $PWD/data:/data : 将主机中当前目录下的data挂载到容器的/data\nredis-server –appendonly yes : 在容器执行redis-server启动命令，并打开redis持久化配置\n最后添加--requirepass \"mypassword\" 设置密码。\n```\n##### 4  连接、查看容器..    使用redis镜像执行redis-cli命令连接到刚启动的容器\n\n```\ndocker exec -it 43f7a65ec7f8（容器Id） redis-cli\n```\n\n\n\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker安装并运行RabbitMQ","url":"/blog/2020/03/25/【Docker】Docker安装并运行ActiveMQ/","content":"##### 1 搜索一下，查看有哪些ActiveMQ镜像\n\n```\ndocker search activemq\n```\n##### 2 我们需要安装webcenter/activemq 这个镜像\n\n```\ndocker pull docker.io/webcenter/activemq\n```\n##### 3 拉取到镜像之后，在不加tag的情况下默认使用latest。查看一下镜像\n\n```\ndocker images\n\nREPOSITORY                                    TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/qq986945193/david_mysql_5.7         1.0.1               9fd8428e083c        5 days ago          457 MB\ndocker.io/gitlab/gitlab-ce                    latest              b0e83ed9366b        7 days ago          1.55 GB\ndocker.io/qq986945193/david_jenkins1127       latest              23bccbdc26cb        3 weeks ago         701 MB\ndocker.io/wurstmeister/kafka                  latest              9de73503addf        4 weeks ago         337 MB\ndocker.io/qq986945193/david_oracle_11g        latest              bcc66886f00f        4 weeks ago         3.45 GB\ndocker.io/qq986945193/david_redis_3.2         v1.0                3b1eb32704df        4 weeks ago         76 MB\ndocker.io/qq986945193/david_mysql_5.7         1.0.0               9451e09270f0        4 weeks ago         447 MB\ndocker.io/qq986945193/david_zookeeper3.4.13   v1.0                f336949ce7a1        8 weeks ago         148 MB\ndocker.io/rabbitmq                            3.7.7-management    2888deb59dfc        3 months ago        149 MB\ndocker.io/qq986945193/david_dubbo_admin       latest              db722badcfdc        16 months ago       141 MB\ndocker.io/webcenter/activemq                  latest              3af156432993        23 months ago       422 MB\ndocker.io/wurstmeister/zookeeper              latest              351aa00d2fe9        2 years ago         478 MB\n```\n\n##### 4 最后我们直接启动镜像，创建容器。\n\n```\ndocker run -d --name myactivemq -p 61617:61616 -p 8162:8161 docker.io/webcenter/activemq:latest\n\n备注：\n61616是activemq的容器使用端口（映射为61617），8161是web页面管理端口（对外映射为8162）\n```\n##### 5 我们可以使用 ip:8162访问我们的web后台。默认账号密码都是admin\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker安装Zookeeper并进行操作管理","url":"/blog/2020/03/25/【Docker】Docker安装Zookeeper并进行操作管理/","content":"\n##### 下载Zookeeper镜像\n```shell\ndocker pull zookeeper\n```\n\n##### 启动容器并添加映射\n```shell\ndocker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper:latest\n```\n\n##### 查看容器是否启动\n```shell\ndocker ps\n```\n\n\n\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker安装Mysql5.7","url":"/blog/2020/03/25/【Docker】Docker安装Mysql5.7/","content":"##### 1 拉取mysql镜像，采用网易加速地址\n\n```\ndocker pull hub.c.163.com/library/mysql:5.7\n```\n\n\n##### 2 重命名镜像名\n\n```\ndocker tag hub.c.163.com/library/mysql:5.7 mysql:5.7\n```\n\n\n##### 3 创建容器且安装镜像.启动。\n\n\n```\ndocker run --name mysql-main -p3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7\n```\n\n```\n-name:容器名称mysql-main\n-p：将端口号映射到主机\n最后设置密码123456\n```\n\n\n##### 4 通过命令进入mysql-main容器\n\n\n```\ndocker exec -it mysql-main bash\n```\n\n##### 5 然后进入MySQL。并设置远程的授权等信息。\n\n\n```\n mysql -uroot -p\n \n grant all privileges on *.* to root@\"%\" identified by \"123456\" with grant option; \n \n ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';\n  \n flush privileges;\n  \n```\n\n##### 6 取消Mysql查询大小写的问题。\n###### 进入docker的MySQL容器，编辑/etc/mysql/mysql.conf.d/mysqld.cnf文件，在[mysqld]下添加如下：\n\n```\n[mysqld] \nlower_case_table_names=1\n```\n###### 保存，退出容器；执行sudo docker restart MySQL ，重启MySQL即可查看。\n##### 7 解决Mysql5.7的查询兼容问题。此设置重启失效。\n\n```\n如：Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column\nMySQL 5.7.5和up实现了对功能依赖的检测。如果启用了only_full_group_by SQL模式(在默认情况下是这样)，那么MySQL就会拒绝选择列表、条件或顺序列表引用的查询，这些查询将引用组中未命名的非聚合列，而不是在功能上依赖于它们。(在5.7.5之前，MySQL没有检测到功能依赖项，only_full_group_by在默认情况下是不启用的。\n\n解决方案1：\n\nset global sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n\nset session sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n\n\n解决方案2（写配置文件，重启不失效。去除NO_ZERO_IN_DATE,NO_ZERO_DATE，解决时间戳的问题）：\n\n进入docker的MySQL容器，编辑/etc/mysql/mysql.conf.d/mysqld.cnf文件，在[mysqld]下添加如下：\n\nsql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'\n\n\n```\n\n##### 8 解决Mysql5.7的密码修改不兼容问题。\n\n\n```\nMysql5.7更改密码，以前的方式会报错。代码如下：\n\nupdate mysql.user  set password=password('root') where user='root'\n\n提示ERROR 1054 (42S22): Unknown column 'password' in 'field list'\n\n最新的更改密码代码是：\n\nupdate mysql.user set authentication_string=password('root') where user='root' \n```\n\n\n##### 备注：\n\n###### 启动docker中 MySQL的时候可以加参数。含义是：\n\n```\n--restart=always 跟随docker启动\n--privileged=true 容器root用户享有主机root用户权限\n-v 映射主机路径到容器\n-e MYSQL_ROOT_PASSWORD=root 设置root用户密码\n-d 后台启动\n--lower_case_table_names=1 设置表名参数名等忽略大小写\n--------------------- \n```\n","tags":["Docker"],"categories":["Java后端"]},{"title":"【Docker】Docker入门之Centos(Linux)下安装docker，并运行hello-world","url":"/blog/2020/03/25/【Docker】Docker入门之Centos(Linux)下安装docker，并运行hello-world/","content":"\n##### 首先安装docker所需要的依赖库\n\n\n```\nsudo yum install -y cmake\nsudo yum install -y  make\nsudo yum install -y gcc\nsudo yum install -y gcc-c++\nsudo yum install -y bison\nsudo yum install -y ncurses\nsudo yum install -y ncurses-devel\n\n```\n###### 首先使用Centos的yum命令，安装docker：\n```shell\n yum install docker\n```\n###### 然后安装完成之后，可以使用docker或者docker version命令查看\n```shell\ndocker或者docker version\n```\n###### 启动docker命令service docker start\n```shell\nservice docker start\n```\n```shell\n[root@localhost local]# service docker start\nRedirecting to /bin/systemctl start docker.service\n```\n###### 然后可以拉取Hello-world镜像：\n```shell\ndocker pull hello-world\n```\n```shell\n[root@localhost local]# docker pull hello-world\nUsing default tag: latest\nTrying to pull repository docker.io/library/hello-world ... \nlatest: Pulling from docker.io/library/hello-world\n9db2ca6ccae0: Pull complete \nDigest: sha256:569d44f69ebf4592ec3a63cbea6d9c7b6cccfd50890794fa169455179b399eb4\nStatus: Downloaded newer image for docker.io/hello-world:latest\n```\n###### 最后可以运行Hello-world镜像：\n```shell\n[root@localhost local]# docker run hello-world\n```\n```shell\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/engine/userguide/\n\n```","tags":["Docker"],"categories":["Java后端"]},{"title":"【Apache】Apache服务器修改端口号及配置项目路径","url":"/blog/2015/08/08/【Apache】Apache服务器修改端口号及配置项目路径/","content":"\n##### 1.修改httpd.conf配置文件。修改端口号\n\n\n```\nListen 80\n可修改为其他不占用的端口号\n```\n###### 2.修改项目路径。首先在`<IfModule alias_module>`标签下增加\n```\n Alias /davidWeb/ \"C:/david/davidwebs/\" \n```\n###### 3.然后在`<IfModule alias_module>`同级目录下增加目录\n```\n<Directory \"C:/david/davidwebs\">  \n    AllowOverride All  \n    Options Indexes FollowSymLinks Includes ExecCGI  \n    Require all granted  \n</Directory>  \n```\n###### 4.重新启动`http://ip:端口号/davidWeb`即可看到自己的项目文件。","tags":["Apache"],"categories":["Java后端"]},{"title":"【Git】Git常用命令，以及提交代码，解决冲突等常用功能","url":"/blog/2015/08/08/【Git】Git常用命令，以及提交代码，解决冲突等常用功能/","content":"\n##### 1 首先下载Git，下载地址：[https://git-scm.com](https://git-scm.com)    \n##### 2 安装好之后，可以使用git命令，在终端中查看是否成功\n\n```\n[david@DavidMacbookPro ~]# git\nusage: git [--version] [--help] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n最常用的 git 命令有：\n   add        添加文件内容至索引\n   bisect     通过二分查找定位引入 bug 的变更\n   branch     列出、创建或删除分支\n   checkout   检出一个分支或路径到工作区\n   clone      克隆一个版本库到一个新目录\n   commit     记录变更到版本库\n   diff       显示提交之间、提交和工作区之间等的差异\n   fetch      从另外一个版本库下载对象和引用\n   grep       输出和模式匹配的行\n   init       创建一个空的 Git 版本库或重新初始化一个已存在的版本库\n   log        显示提交日志\n   merge      合并两个或更多开发历史\n   mv         移动或重命名一个文件、目录或符号链接\n   pull       获取并合并另外的版本库或一个本地分支\n   push       更新远程引用和相关的对象\n   rebase     本地提交转移至更新后的上游分支中\n   reset      重置当前HEAD到指定状态\n   rm         从工作区和索引中删除文件\n   show       显示各种类型的对象\n   status     显示工作区状态\n   tag        创建、列出、删除或校验一个GPG签名的 tag 对象\n\n命令 'git help -a' 和 'git help -g' 显示可用的子命令和一些指南。参见\n'git help <命令>' 或 'git help <指南>' 来查看给定的子命令帮助或指南。\n```\n##### 3 配置和GitHub、gitee等平台的公钥和私钥。\n\n```\n## 1 检查一下用户名和邮箱是否配置（github支持我们用用户名或邮箱登录）：\ngit config --global  --list \n\nbogon:david david$ git config --global  --list \nuser.name=david\nuser.email=986945193@qq.com\nfilter.lfs.clean=git-lfs clean -- %f\nfilter.lfs.smudge=git-lfs smudge -- %f\nfilter.lfs.process=git-lfs filter-process\nfilter.lfs.required=true\ncore.autocrlf=input\ncredential.helper=store\n\n```\n\n```\n## 2 配置我们的用户名和密码\ngit config --global  user.name \"这里换上你的用户名\"\ngit config --global  user.email \"这里换上你的邮箱\" \n\n```\n\n```\n\n## 3 生成秘钥，此时，我们可以一直点回车，主要是为了提示生成文件位置，以及配置密码：\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n```\n## 4 可以看到在自己用户目录下，生成了私钥和公钥。此时，可以将公钥内容，复制到GitHub等系统后台。\nbogon:david david$ ls ~/.ssh/\ngit config --global  user.name \"david\"\nid_rsa\nid_rsa.pub\nknown_hosts\n```\n\n```\n## 5 id_rsa.pub公钥内容类似如下\n\nssh-rsa DDDDDDDDC1yc2EAAAADAQABAAABAQDHlYIVVrGI/xjKEjUnKVlW2JMO4kvJjpQJhKnVoM60+XapMC8gORUvvgaQqi5DMZOOf0qglrDYjwhkztFkZsSJIeBIeNIZFfSaI3Z9UKxl7PxA9JrzOBUgLMsFx4ITOdQMC/DDDDD4Qdz5AGI+DbjOGD3p8pciwTr9oyZ9Atli33y6TURg0Xc1YTve9h97ibc3jOHMfo+Zw0MwxFhr50FOUg5u5hjDM0X4/G8sbBB4Uujn4FKY6Qss+seAl2/mhol6qj0mQ9R+I0z3V1Lf2E4aoTBDtaDRNgSuGsW7pHlMFur/ra/BIIyhqJcSjxCrLdmBpZvOo/6s0nYjdWrDDDDD 986945193@qq.com\n```\n##### 4 此时就可以使用ssh下载我们的项目了，也就是有两种方式下载项目如下：\n\n```\n\ngit clone git@192.168.1.188:david/david_github_demo.git\n\ngit clone http://192.168.1.105:8888/david/david.git\n\n```\n\n##### 常用命令介绍\n###### 当配置完成ssh之后，监测是否成功命令：\n\n```\n ssh -T git@192.168.1.188\n```\n###### git clone下载代码，指定分支。默认是从master分支下载\n\n```\n## 其中dev_0.0.1 代表分支名称\ngit clone -b dev_0.0.1 git@192.168.1.188:david/david_demo.git\n```\n###### 查看所有的远程库。关联此项目的\n\n```\ngit remote -v \n```\n### 团队发中，前提fork了一份代码之后，后续提交，合并，解决冲突\n###### 1 拉取自己用户目录的项目到本地\n\n```\n git clone '本用户目录下的项目地址'\n```\n###### 2 在本地项目加入主库的地址\n\n```\n git remote add main '主库地址'\n```\n\n###### 3 拉取主库的最新代码。更新主库代码到本地。  master 代表：分支名称。\n\n```\n git pull main master\n```\n###### 4 提交代码。\n\n```\n## 添加当前目录下文件\n git add .\n## 提交到本地仓库\n git commit -m ''\n## 推送到远端仓库 \n git push\n```\n###### 5 从自己项目库下载项目后，更新主库项目到本地仓库。然后将主库项目更新的文件，提交到自己项目库下，然后再开发，最后提交自己文件到自己库下，最后合并到主库中。如果使用开发工具，可以直接commit and push....\n###### 6 如果从主库更新下来，有冲突，则可以解决冲突后，commit push，并合并到主库项目中。解决冲突可使用开发工具或者记事本等工具。\n\n\n\n\n","tags":["Git"],"categories":["Java后端"]},{"title":"【Mac】Mac操作系统下MySQL密码忘记后重置密码的方法","url":"/blog/2015/08/08/【Mac】Mac操作系统下MySQL密码忘记后重置密码的方法/","content":"1.苹果->系统偏好设置->最下边点mysql 在弹出页面中 关闭mysql服务（点击stop mysql server）\n\n2.进入目录\n\n```\ncd /usr/local/mysql/bin \n```\n3.获取权限。此时需要mac系统的密码，就是所谓的获取超级管理员权限。\n```\nsudo su \n```\n4.重启服务器\n\n```\n./mysqld_safe --skip-grant-tables & \n```\n回车后mysql会自动重启（偏好设置中mysql的状态会变成running）\n\n5.重开个终端，重启一下mysql服务，然后直接进入mysql\n\n```\n// 重启mysql\nsudo /usr/local/mysql/support-files/mysql.server restart\n// 进入mysql\n./mysql\n// 执行以下命令，刷新，然后设置新的密码。最后用户名为root，密码就是你自己设置的。\nFLUSH PRIVILEGES; \nSET PASSWORD FOR 'root'@'localhost' = PASSWORD('你的新密码');\n```","tags":["Mac"],"categories":["Mac"]},{"title":"【Maven】Maven中央仓库改为阿里云的仓库，增快下载速度","url":"/blog/2015/08/08/【Maven】Maven中央仓库改为阿里云的仓库，增快下载速度/","content":"配置方法1: 在我们的 $MAVEN_HOME/conf 下的 settings.xml 的<mirrors>标签中添加如下配置:\n```\n<mirror>  \n  <id>alimaven</id>  \n  <name>aliyun maven</name>  \n  <url>http://maven.aliyun.com/nexus/content/groups/public/</url>  \n  <mirrorOf>central</mirrorOf>          \n</mirror>  \n```\n\n配置方法2: 直接在我们的maven项目中的 pom.xml 中直接添加\n\n```\n<repositories><!-- 代码库 -->  \n    <repository>  \n        <id>maven-ali</id>  \n        <url>http://maven.aliyun.com/nexus/content/groups/public//</url>  \n        <releases>  \n            <enabled>true</enabled>  \n        </releases>  \n        <snapshots>  \n            <enabled>true</enabled>  \n            <updatePolicy>always</updatePolicy>  \n            <checksumPolicy>fail</checksumPolicy>  \n        </snapshots>  \n    </repository>  \n</repositories>  \n```","tags":["Maven"],"categories":["Maven"]},{"title":"【MyBatis】Mybatis中大于、等于、小于等于在xml中的写法","url":"/blog/2015/08/08/【MyBatis】Mybatis中大于、等于、小于等于在xml中的写法/","content":"\n##### 由于MyBatis的sql写在XML里面，有些sql的语法符号和xml里面的冲突，比如：大于号 > 和小于号 < 在xml是标签的闭合符号，这样就产生了冲突。下面官方给出了解决方法。\n\n \n\n##### 方法（1）：使用原生的写法。\n\n\n```\n符号：     <        <=      >        >=        &           '             \"  \n替换符号   &lt;    &lt;=   &gt;    &gt;=     &amp;       &apos;        &quot;\n```\n\n  \n##### 例如：sql如下：  \n\n```\nwhere update_time &gt;= #{startDate} and update_time &lt;= #{endDate}  \ngt --> greater than （大于 ）\nlt --> less than（小于）\n```\n\n\n \n\n##### 方法（2）：使用xml语法写法。\n\n\n```\n大于等于 <![CDATA[ >= ]]>  \n小于等于 <![CDATA[ <= ]]>\n```\n\n  \n##### 例如：sql如下：  \n\n```\nupdate_time <![CDATA[ >= ]]> #{startDate} and update_time <![CDATA[ <= ]]> #{endDate}\n```\n ","tags":["MyBatis"],"categories":["MyBatis"]}]